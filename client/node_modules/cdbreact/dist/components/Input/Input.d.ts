import React from 'react';
import PropTypes from 'prop-types';
interface Props {
    background?: boolean;
    className?: string;
    color?: string;
    disabled?: boolean;
    focused?: boolean;
    fontSize?: number;
    getValue?: Function;
    placeholder?: string;
    id?: string;
    indeterminate?: boolean;
    inputClassName?: string;
    labelClassName?: string;
    onBlur?: Function;
    onChange?: Function;
    onFocus?: Function;
    onInput?: Function;
    size?: string;
    type?: string;
    value?: string;
    valueDefault?: string;
    icon?: React.ReactNode;
    checked?: boolean;
    label?: string;
    material?: boolean;
}
declare const Input: {
    (props: Props): JSX.Element;
    propTypes: {
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        background: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        color: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        focused: PropTypes.Requireable<boolean>;
        fontSize: PropTypes.Requireable<number>;
        getValue: PropTypes.Requireable<(...args: any[]) => any>;
        placeholder: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        indeterminate: PropTypes.Requireable<boolean>;
        inputClassName: PropTypes.Requireable<string>;
        labelClassName: PropTypes.Requireable<string>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onInput: PropTypes.Requireable<(...args: any[]) => any>;
        size: PropTypes.Requireable<string>;
        type: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
        valueDefault: PropTypes.Requireable<string>;
        checked: PropTypes.Requireable<boolean>;
    };
    defaultProps: {
        valueDefault: string;
        background: boolean;
        className: string;
        color: string;
        disabled: boolean;
        focused: boolean;
        fontSize: number;
        placeholder: string;
        id: string;
        indeterminate: boolean;
        inputClassName: string;
        labelClassName: string;
        type: string;
        value: string;
        getValue: () => void;
        onBlur: () => void;
        onFocus: () => void;
        onInput: () => void;
        size: string;
        icon: any;
    };
};
export default Input;
export { Input as CDBInput };
