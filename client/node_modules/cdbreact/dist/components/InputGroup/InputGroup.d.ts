import React from 'react';
import PropTypes from 'prop-types';
interface Props {
    append?: React.ReactNode;
    appendClassNames?: string;
    ariaLabel?: string;
    background?: boolean;
    children?: React.ReactNode;
    className?: string;
    containerClassName?: string;
    containerId?: string;
    getValue?: Function;
    hint?: string;
    id?: string;
    inputs?: React.ReactNode;
    label?: string;
    labelClassName?: string;
    material?: boolean;
    onChange?: Function;
    onIconClick?: Function;
    prepend?: React.ReactNode;
    prependClassName?: string;
    size?: string;
    tag?: [string, Function];
    textClassName?: string;
    type?: any;
    value?: string;
    valueDefault?: string;
    appendClassName?: any;
    icon?: any;
    as?: any;
    notag?: any;
    div?: any;
}
declare const InputGroup: {
    (props: Props): JSX.Element;
    propTypes: {
        append: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        appendClassNames: PropTypes.Requireable<string>;
        ariaLabel: PropTypes.Requireable<string>;
        background: PropTypes.Requireable<boolean>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        containerClassName: PropTypes.Requireable<string>;
        containerId: PropTypes.Requireable<string>;
        getValue: PropTypes.Requireable<(...args: any[]) => any>;
        hint: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        inputs: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        label: PropTypes.Requireable<string>;
        labelClassName: PropTypes.Requireable<string>;
        material: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onIconClick: PropTypes.Requireable<(...args: any[]) => any>;
        prepend: PropTypes.Requireable<any>;
        prependClassName: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string>;
        tag: PropTypes.Requireable<string | ((...args: any[]) => any)>;
        textClassName: PropTypes.Requireable<string>;
        type: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
        valueDefault: PropTypes.Requireable<string>;
    };
    defaultProps: {
        tag: string;
        type: string;
    };
};
export default InputGroup;
export { InputGroup as CDBInputGroup };
