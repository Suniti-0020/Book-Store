/// <reference types="react" />
import PropTypes from 'prop-types';
interface Props {
    containerClassName?: string;
    type?: string;
    CDBBtn?: any;
    CDBPopoverBody?: any;
    data?: any;
    CDBPopoverHeader?: any;
    feedback?: boolean;
    fillClassName?: string;
    fillColors?: [boolean, string];
    getValue?: Function;
    iconClassName?: string;
    iconFaces?: boolean;
    iconRegular?: boolean;
    iconSize?: string;
    submitHandler?: Function;
    tag?: any;
    tooltip?: any;
    choosed?: any;
}
declare const Rating: {
    (props: Props): JSX.Element;
    propTypes: {
        containerClassName: PropTypes.Requireable<string>;
        data: PropTypes.Requireable<PropTypes.InferProps<{
            choosed: PropTypes.Requireable<boolean>;
            icon: PropTypes.Requireable<string>;
            tooltip: PropTypes.Requireable<string>;
        }>[]>;
        feedback: PropTypes.Requireable<boolean>;
        fillClassName: PropTypes.Requireable<string>;
        fillColors: PropTypes.Requireable<boolean | string[]>;
        getValue: PropTypes.Requireable<(...args: any[]) => any>;
        iconClassName: PropTypes.Requireable<string>;
        iconFaces: PropTypes.Requireable<boolean>;
        iconRegular: PropTypes.Requireable<boolean>;
        iconSize: PropTypes.Requireable<string>;
        submitHandler: PropTypes.Requireable<(...args: any[]) => any>;
        tag: PropTypes.Requireable<string>;
    };
    defaultProps: {
        containerClassName: string;
        data: {
            tooltip: string;
        }[];
        feedback: boolean;
        fillClassName: string;
        iconClassName: string;
        iconSize: string;
        iconRegular: boolean;
        tag: string;
        submitHandler: (e: any) => any;
    };
};
export default Rating;
export { Rating as CDBRating };
