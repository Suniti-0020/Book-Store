import React from 'react';
import PropTypes from 'prop-types';
export declare type StepperContextType = {
    direction?: string;
    mainColor?: string;
    width?: number;
    height?: number;
    stepSize?: number;
    children?: React.ReactNode | any;
    content?: any[];
    active?: number;
    setActive?: React.Dispatch<React.SetStateAction<number>>;
    showTooltip?: boolean;
    showTitle?: boolean;
    showIndex?: boolean;
    lastChildId?: number;
};
interface Props {
    direction: string;
    currentStepNumber: number;
    steps: any[];
    stepSize?: number;
    mainColor?: string;
    goTo?: Function;
    showTooltip?: boolean;
    showTitle?: boolean;
    showIndex?: boolean;
    children?: any;
}
export declare const StepperContext: React.Context<StepperContextType>;
declare const Stepper: {
    (props: Props): JSX.Element;
    defaultProps: {
        direction: string;
        currentStepNumber: number;
        mainColor: any;
        stepSize: number;
        showTooltip: boolean;
        showTitle: boolean;
    };
    propTypes: {
        direction: PropTypes.Validator<string>;
        currentStepNumber: PropTypes.Validator<number>;
        steps: PropTypes.Validator<any[]>;
        stepSize: PropTypes.Requireable<number>;
        mainColor: PropTypes.Requireable<string>;
        goTo: PropTypes.Requireable<(...args: any[]) => any>;
        showTooltip: PropTypes.Requireable<boolean>;
        showTitle: PropTypes.Requireable<boolean>;
    };
};
export default Stepper;
export { Stepper as CDBStepper };
